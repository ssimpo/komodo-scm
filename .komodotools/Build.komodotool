{
  "keyboard_shortcut": "", 
  "name": "Build", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_postopen", 
  "value": [
    "// summary:", 
    "//\t\tScript to build the xpi", 
    "// description:", 
    "//\t\tScript to build an xpi, running koext build against the app directory.", 
    "", 
    "if (!org) var org = {};", 
    "if (!org.simpo) org.simpo = {};", 
    "org.simpo.scriptBasePath = \"/app/content/scripts/js/lib\";", 
    "", 
    "(function(importer, scriptBasePath){", 
    "\tvar projectPath = \"file:///\" + ko.interpolate.interpolateString('%p').replace(/\\\\/g, \"/\");", 
    "\t", 
    "\talert(projectPath + org.simpo.scriptBasePath + \"/requirejs/requirejs/require.js?v=18\");", 
    "\t", 
    "\timporter(projectPath + org.simpo.scriptBasePath + \"/requirejs/requirejs/require.js?v=18\",this);", 
    "\t", 
    "\trequire({", 
    "\t\t\"packages\": [{", 
    "\t\t\t\"name\": \"komodoSCM\",", 
    "\t\t\t\"location\": projectPath + scriptBasePath", 
    "\t\t},{", 
    "\t\t\t\"name\": \"komodoProjectTools\",", 
    "\t\t\t\"location\": projectPath + \"/.komodotools/lib\"", 
    "\t\t}] ,", 
    "\t\t\"cacheBust\": Date.now()", 
    "\t});", 
    "\t", 
    "\trequire([", 
    "\t\t\"mozilla.org/consoleservice\",", 
    "\t\t\"activestate.com/koOs\",", 
    "\t\t\"activestate.com/koSysUtils\",", 
    "\t\t\"mozilla.org/xre/app-info\",", 
    "\t\t\"activestate.com/koDirs\",", 
    "\t\t\"activestate.com/koOsPath\",", 
    "\t\t\"activestate.com/koFileEx\"", 
    "\t], function(", 
    "\t\tmzConsoleService, koOs, koSysUtils, mzAppInfo, koDirs, koOsPath, koFileEx", 
    "\t){", 
    "\t\tmzConsoleService.logStringMessage(\"HELLO\");", 
    "\t\tvar project = ko.macros.current.project;", 
    "\t\tvar pythonExe = koDirs.pythonExe;", 
    "\t\tvar projectDir = ko.interpolate.interpolateString('%p');", 
    "\t\tvar scriptName = \"koext\" + ((mzAppInfo.OS === \"WINNT\") ? \".py\" : \"\");", 
    "\t\tvar arr = [koDirs.sdkDir, 'bin', scriptName]", 
    "\t\tvar app = koOs.path.joinlist(arr.length, arr);", 
    "\t\tvar cmd = '\"' + pythonExe + '\" \"' + app + '\" build -d \"' + projectDir + '\\\\app\"';", 
    "\t\tif(mzAppInfo.OS == \"WINNT\"){", 
    "\t\t\tcmd = '\"' + cmd + '\"';", 
    "\t\t}", 
    "\t\tvar cwd = koDirs.mozBinDir;", 
    "", 
    "\t\tcmd = '\"' + projectDir + '\\\\.komodotools\\\\copyApp.bat\" \"' + projectDir + '\"';", 
    "\t\tcmd += \" {'cwd': u'\"+cwd+\"'}\";", 
    "\t\tko.run.runEncodedCommand(window, cmd, function(){", 
    "\t\t\tvar rdfDoc = getRdfXml();", 
    "\t\t\tvar Document = rdfDoc.getElementsByTagName(\"Description\");", 
    "", 
    "\t\t\tif(Document.length > 0){", 
    "\t\t\t\tvar children = getChildElements(Document[0]);", 
    "\t\t\t\tvar emData = parseEmData(children);", 
    "\t\t\t\tvar files = allFiles(ko.interpolate.interpolateString('%p') + \"\\\\build\\\\app\");", 
    "\t\t\t\treplaceTemplateData(files, emData);", 
    "\t\t\t}", 
    "\t", 
    "\t\t\tcmd = '\"' + projectDir + '\\\\.komodotools\\\\moveBuild.bat\" \"' + projectDir + '\" \"' + pythonExe + '\" \"' + app + '\"';", 
    "\t\t\tcmd += \" {'cwd': u'\"+cwd+\"'}\";", 
    "\t\t\tko.run.runEncodedCommand(window, cmd, function(){", 
    "\t\t\t\tko.statusBar.AddMessage('Build complete', 'projects', 5000, true);", 
    "\t\t\t\tko.projects.manager.saveProject(project);", 
    "\t\t\t});", 
    "\t\t});", 
    "\t\t", 
    "\t\tfunction replaceTemplateData(files, data){", 
    "\t\t\tvar rx = /\\<\\%\\=.*?\\%>/m;", 
    "\t\t\t", 
    "\t\t\tfiles.forEach(function(file){", 
    "\t\t\t\tvar content = readFile(file);", 
    "\t\t\t\tvar test = rx.test(content);", 
    "\t\t\t\t", 
    "\t\t\t\tif(rx.test(content)){", 
    "\t\t\t\t\twhile(rx.test(content)){", 
    "\t\t\t\t\t\tcontent = replaceTemplateTagWithData(content, data);", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\twriteFile(file, content);", 
    "\t\t\t\t}", 
    "\t\t\t});", 
    "\t\t}", 
    "", 
    "\t\tfunction replaceTemplateTagWithData(text, data){", 
    "\t\t\tvar rx = /\\<\\%\\=(.*?)\\%>/m;", 
    "\t", 
    "\t\t\tmatch = rx.exec(text);", 
    "\t\t\tif(match){", 
    "\t\t\t\tvar lookup = trimStr(match[1]);", 
    "\t\t\t\tvar value = data[lookup];", 
    "\t\t", 
    "\t\t\t\tif(value){", 
    "\t\t\t\t\ttext = text.replace(match[0], value);", 
    "\t\t\t\t}else{", 
    "\t\t\t\t\ttext = text.replace(match[0], \"\");", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t", 
    "\t\t\treturn text", 
    "\t\t}", 
    "", 
    "\t\tfunction trimStr(str){", 
    "\t\t\treturn str.replace(/^\\s+|\\s+$/g, '');", 
    "\t\t}", 
    "", 
    "\t\tfunction allFiles(path, files){", 
    "\t\t\tfiles = files || [];", 
    "\t", 
    "\t\t\tvar dirList = koOs.listdir(path, {});", 
    "\t\t\tfor(var n = 0; n < dirList.length; n++){", 
    "\t\t\t\tvar cFile = path + \"\\\\\" + dirList[n];", 
    "\t\t", 
    "\t\t\t\tif(koOsPath.isdir(cFile)){", 
    "\t\t\t\t\tfiles = allFiles(cFile, files);", 
    "\t\t\t\t}else{", 
    "\t\t\t\t\tfiles.push(cFile)", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t", 
    "\t\t\treturn files;", 
    "\t\t}", 
    "", 
    "\t\tfunction getRdfXml(){", 
    "\t\t\tvar projectDir = ko.interpolate.interpolateString('%p');", 
    "\t\t\tvar installRdf = projectDir + \"\\\\build\\\\app\\\\install.rdf\";", 
    "", 
    "\t\t\tvar XMLParser = new DOMParser();", 
    "\t\t\tvar rdfDoc = XMLParser.parseFromString(", 
    "\t\t\t\treadFile(installRdf),", 
    "\t\t\t\t\"text/xml\"", 
    "\t\t\t);", 
    "\t", 
    "\t\t\treturn rdfDoc;", 
    "\t\t}", 
    "", 
    "\t\tfunction parseEmData(elements){", 
    "\t\t\tvar data = {};", 
    "\t", 
    "\t\t\telements.forEach(function(element){", 
    "\t\t\t\tif(/^em\\:/.test(element.tagName)){", 
    "\t\t\t\t\tvar id = element.tagName.replace(\"em:\", \"\");", 
    "\t\t\t\t\tdata[id] = element.textContent;", 
    "\t\t\t\t}", 
    "\t\t\t});", 
    "\t", 
    "\t\t\treturn data;", 
    "\t\t}", 
    "", 
    "\t\tfunction getChildElements(node){", 
    "\t\t\tvar elements = [];", 
    "\t", 
    "\t\t\tfor(var n = 0; n < node.childNodes.length; n++){", 
    "\t\t\t\tvar cnode = node.childNodes[n];", 
    "\t\t\t\tif(cnode.nodeType === 1){", 
    "\t\t\t\t\telements.push(cnode);", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t", 
    "\t\t\treturn elements;", 
    "\t\t}", 
    "", 
    "\t\tfunction readFile(filename) {", 
    "\t\t\ttry {", 
    "\t\t\t\tkoFileEx.URI = filename;", 
    "\t\t\t\tkoFileEx.open('rb');", 
    "\t\t\t\tvar content = koFileEx.readfile();", 
    "\t\t\t\tkoFileEx.close();", 
    "\t\t\t\treturn content;", 
    "\t\t\t} catch(e) { ", 
    "\t\t\t\talert(e+ \"filename: \"+filename);", 
    "\t\t\t\treturn \"\";", 
    "\t\t\t}", 
    "\t\t}", 
    "", 
    "\t\tfunction writeFile(filename, content){", 
    "\t\t\ttry {", 
    "\t\t\t\tkoFileEx.URI = filename;", 
    "\t\t\t\tkoFileEx.open('wb+');", 
    "\t\t\t\tkoFileEx.puts(content); ", 
    "\t\t\t\tkoFileEx.close();", 
    "\t\t\t} catch(e) {", 
    "\t\t\t\talert(e+\" filename: \"+filename);", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\t", 
    "\t});", 
    "})(Components.utils.import, org.simpo.scriptBasePath);"
  ], 
  "version": "1.0.12", 
  "async": 0, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/lightning_go.png"
}