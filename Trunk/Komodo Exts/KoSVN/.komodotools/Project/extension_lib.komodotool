{
  "keyboard_shortcut": "", 
  "name": "extension_lib", 
  "language": "JavaScript", 
  "trigger_enabled": "0", 
  "rank": "100", 
  "trigger": "trigger_postopen", 
  "value": [
    "try {", 
    "    ", 
    "var extensionLib = function() {", 
    "    this.os = Components.classes['@activestate.com/koOs;1'].", 
    "        getService(Components.interfaces.koIOs);", 
    "    this.error = false;", 
    "}", 
    "", 
    "extensionLib.prototype.getPath = function(relative) {", 
    "    try {", 
    "        var prj_path = ko.interpolate.interpolateString('%p');", 
    "        var path = this.os.path.join(prj_path, relative);", 
    "        return path;", 
    "    } catch(e) {", 
    "        alert(e+\"\\narg name: \"+name);", 
    "        return \"\";", 
    "    }", 
    "}", 
    "", 
    "extensionLib.prototype.readFile = function(filename) {", 
    "    // read the template file", 
    "    try {", 
    "        var fileEx = Components.classes[\"@activestate.com/koFileEx;1\"]", 
    "                .createInstance(Components.interfaces.koIFileEx);", 
    "        fileEx.URI = filename;", 
    "        fileEx.open('rb');", 
    "        var content = fileEx.readfile();", 
    "        fileEx.close();", 
    "        return content;", 
    "    } catch(e) {", 
    "        alert(e+\"\\narg filename: \"+filename);", 
    "        return \"\";", 
    "    }", 
    "}", 
    "", 
    "extensionLib.prototype.writeFile = function(filename, content) {", 
    "    try {", 
    "        var fileEx = Components.classes[\"@activestate.com/koFileEx;1\"]", 
    "                .createInstance(Components.interfaces.koIFileEx);", 
    "        fileEx.URI = filename;", 
    "        fileEx.open('wb+');", 
    "        fileEx.puts(content);", 
    "        fileEx.close();", 
    "    } catch(e) {", 
    "        alert(e+\"\\narg filename: \"+filename);", 
    "    }", 
    "}", 
    "", 
    "extensionLib.prototype.getRdfVars = function(txt) {", 
    "    try {", 
    "        var Rx = /\\<em\\:([\\w]+)[\\ \\S]*\\>([\\S\\ ]+?)\\<\\//g;", 
    "        var ext_vars = {};", 
    "        var results;", 
    "        while (!!(results = Rx.exec(txt))) {", 
    "            var idRx = /type|min|max|\\{/;", 
    "            if (!idRx.test(results[0])) { // filter out stuff we don't want", 
    "                ext_vars[results[1]] = results[2];", 
    "            }", 
    "        }", 
    "        return ext_vars;", 
    "    } catch(e) {", 
    "        alert(e+\"\\narg rdf_path: \"+rdf_path);", 
    "        return \"\";", 
    "    }", 
    "}", 
    "", 
    "extensionLib.prototype.getManifestVars = function(txt) {", 
    "    try {", 
    "        var rx1 = /content ([\\S]+?) jar\\:([\\S]+?)\\.jar/g;", 
    "        var res1 = rx1.exec(txt);", 
    "        var rx2 = /chrome:\\/\\/([\\S]+?)\\/content\\/overlay\\.xul/g;", 
    "        var res2 = rx2.exec(txt);", 
    "        return new Array(res1[1], res1[2], res2[1]);", 
    "    } catch(e) {", 
    "        alert(e+\"\\narg path: \"+path);", 
    "        return \"\";", 
    "    }", 
    "}", 
    "", 
    "extensionLib.prototype.getOverlayVars = function(txt) {", 
    "    try {", 
    "        var rx1 = /<overlay id=\"([\\S]+?)\"/g;", 
    "        var res1 = rx1.exec(txt);", 
    "        var rx2 = /<menuitem id=\"([\\S]+?)\"[\\s]+?label=\"([\\S\\ ]+?)\"/g;", 
    "        var res2 = rx2.exec(txt);", 
    "        return [res1[1], res2[1], res2[2]];", 
    "    } catch(e) {", 
    "        alert(e+\"\\narg path: \"+path);", 
    "        return \"\";", 
    "    }", 
    "}", 
    "", 
    "extensionLib.prototype.updateProject = function(vars) {", 
    "    try {", 
    "        var overlayPath = this.getPath('content/overlay.xul');", 
    "        if (this.os.path.exists(overlayPath)) {", 
    "            var ovl_str = this.readFile(overlayPath);", 
    "            var ov_vars = this.getOverlayVars(ovl_str);", 
    "            var ovl_new = [vars.ext_name+'Overlay', 'menu_'+vars.ext_name, vars.name];", 
    "            this.writeFile(overlayPath, this.replaceAll(ov_vars, ovl_new, ovl_str));", 
    "        } else { this.error = \"Doesn't exist: \"+overlayPath; return false; }", 
    "        ", 
    "        var manifestPath = this.getPath('chrome.manifest');", 
    "        if (this.os.path.exists(manifestPath)) {", 
    "            var man_str = this.readFile(manifestPath);", 
    "            var man_vars = this.getManifestVars(man_str);", 
    "            var man_new = [vars.ext_name, vars.ext_name, vars.ext_name];", 
    "            this.writeFile(manifestPath, this.replaceAll(man_vars, man_new, man_str));", 
    "        } else { this.error = \"Doesn't exist: \"+overlayPath; return false; }", 
    "        ", 
    "        var rdf_path = this.getPath('install.rdf');", 
    "        if (this.os.path.exists(rdf_path)) {", 
    "            var rdf_str = this.readFile(rdf_path);", 
    "            var rdf_vars = this.getRdfVars(rdf_str);", 
    "            this.writeFile(rdf_path, this.replaceAll(rdf_vars, vars, rdf_str));", 
    "        } else { this.error = \"Doesn't exist: \"+overlayPath; return false; }", 
    "        ", 
    "    } catch(e) {", 
    "        this.error = e;", 
    "        return false;", 
    "    }", 
    "    return true;", 
    "}", 
    "", 
    "extensionLib.prototype.replaceAll = function(orig_vars, new_vars, str) {", 
    "    try {", 
    "        var out = str;", 
    "        for(v in orig_vars) {", 
    "            out = out.replace(orig_vars[v], new_vars[v]);", 
    "        }", 
    "        return out;", 
    "    } catch(e) {", 
    "        alert(e);", 
    "        return \"\";", 
    "    }", 
    "}", 
    "", 
    "extensionLib.prototype.getNiceName = function(name) {", 
    "    return this.trim(name).replace(/[\\W]/g,'').toLowerCase();", 
    "}", 
    "", 
    "extensionLib.prototype.trim = function(str) {", 
    "    return str.replace(/^\\s*/, '').replace(/\\s*$/, '');", 
    "}", 
    "", 
    "extensionLib.prototype.clone = function(obj) {", 
    "    var newobj = {};", 
    "    for(i in obj) {", 
    "        newobj[i] = obj[i];", 
    "    }", 
    "    return newobj;", 
    "}", 
    "", 
    "extensionLib.prototype._dump = function(obj) {", 
    "    var str = '';", 
    "    for(i in obj) {", 
    "        str += i+': '+obj[i]+'\\n';", 
    "    }", 
    "    return(str);", 
    "}", 
    "", 
    "extensionLib.prototype._keys = function(obj) {", 
    "  var out = new Array();", 
    "  for(i in obj) {", 
    "    out.push(i);", 
    "  }", 
    "  return out;", 
    "}", 
    "", 
    "} catch(e) {", 
    "    alert(e);", 
    "}", 
    ""
  ], 
  "version": "1.0.7", 
  "async": "0", 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/brick.png"
}